prismNode {
  service = {
    host = "localhost"
    host = ${?PRISM_NODE_HOST}
    port = 50053
    port = ${?PRISM_NODE_PORT}
    usePlainText = true
    usePlainText = ${?PRISM_NODE_USE_PLAIN_TEXT}
  }
}

pollux {
  database {
    host = "localhost"
    host = ${?POLLUX_DB_HOST}
    port = 5432
    port = ${?POLLUX_DB_PORT}
    databaseName = "pollux"
    databaseName = ${?POLLUX_DB_NAME}
    username = "postgres"
    username = ${?POLLUX_DB_USER}
    password = "postgres"
    password = ${?POLLUX_DB_PASSWORD}
    appUsername = "pollux-application-user"
    appUsername = ${?POLLUX_DB_APP_USER}
    appPassword = "password"
    appPassword = ${?POLLUX_DB_APP_PASSWORD}
    awaitConnectionThreads = 8
  }
  issueBgJobRecordsLimit = 25
  issueBgJobRecordsLimit = ${?ISSUE_BG_JOB_RECORDS_LIMIT}
  issueBgJobRecurrenceDelay = 2 seconds
  issueBgJobRecurrenceDelay = ${?ISSUE_BG_JOB_RECURRENCE_DELAY}
  issueBgJobProcessingParallelism = 5
  issueBgJobProcessingParallelism = ${?ISSUE_BG_JOB_PROCESSING_PARALLELISM}
  presentationBgJobRecordsLimit = 25
  presentationBgJobRecordsLimit = ${?PRESENTATION_BG_JOB_RECORDS_LIMIT}
  presentationBgJobRecurrenceDelay = 2 seconds
  presentationBgJobRecurrenceDelay = ${?PRESENTATION_BG_JOB_RECURRENCE_DELAY}
  presentationBgJobProcessingParallelism = 5
  presentationBgJobProcessingParallelism = ${?PRESENTATION_BG_JOB_PROCESSING_PARALLELISM}
}

connect {
  database {
    host = "localhost"
    host = ${?CONNECT_DB_HOST}
    port = 5432
    port = ${?CONNECT_DB_PORT}
    databaseName = "connect"
    databaseName = ${?CONNECT_DB_NAME}
    username = "postgres"
    username = ${?CONNECT_DB_USER}
    password = "postgres"
    password = ${?CONNECT_DB_PASSWORD}
    appUsername = "connect-application-user"
    appUsername = ${?CONNECT_DB_APP_USER}
    appPassword = "password"
    appPassword = ${?CONNECT_DB_APP_PASSWORD}
    awaitConnectionThreads = 8
  }
  connectBgJobRecordsLimit = 25
  connectBgJobRecordsLimit = ${?CONNECT_BG_JOB_RECORDS_LIMIT}
  connectBgJobRecurrenceDelay = 2 seconds
  connectBgJobRecurrenceDelay = ${?CONNECT_BG_JOB_RECURRENCE_DELAY}
  connectBgJobProcessingParallelism = 5
  connectBgJobProcessingParallelism = ${?CONNECT_BG_JOB_PROCESSING_PARALLELISM}
  connectInvitationExpiry = 300 seconds
  connectInvitationExpiry = ${?CONNECT_INVITATION_EXPIRY}
}

agent {
    httpEndpoint {
        http {
            port = 8085
            port =${?AGENT_HTTP_PORT}
        }
        publicEndpointUrl = "https://host.docker.internal:8080/prism-agent"
        publicEndpointUrl = ${?REST_SERVICE_URL}
    }
    didCommEndpoint {
        http {
          port = 8090
          port =${?AGENT_DIDCOMM_PORT}
        }
        publicEndpointUrl = "http://localhost:8090"
        publicEndpointUrl = ${?DIDCOMM_SERVICE_URL}
    }
    httpClient {
        connectionPoolSize = 0
        connectionPoolSize = ${?AGENT_HTTP_CLIENT_CONNECTION_POOL_SIZE}
        idleTimeout = 5.seconds
        idleTimeout = ${?AGENT_HTTP_CLIENT_IDLE_TIMEOUT}
        connectionTimeout = 5.seconds
        connectionTimeout = ${?AGENT_HTTP_CLIENT_CONNECTION_TIMEOUT}
    }
    authentication {
        admin {
            token = "admin"
            token = ${?ADMIN_TOKEN}
        }
        apiKey {
            # salt is used to hash the api key
            salt = "JLXTS4J2qkMOgfO8"
            salt = ${?API_KEY_SALT}

            # enabled is used to enable/disable the api key authentication
            # if apikey authentication is disabled, the alternative authentication method is used
            # if the alternative authentication method is not configured, apikey authentication is disabled the default user is used
            enabled = true
            enabled = ${?API_KEY_ENABLED}

            # authenticateAsDefaultUser is used to authenticate the api key as the default user
            # if authenticateAsDefaultUser is disabled, the api key is authenticated to the entity that owns the api key
            authenticateAsDefaultUser = true // TODO: set to 'false' before merging
            authenticateAsDefaultUser = ${?API_KEY_AUTHENTICATE_AS_DEFAULT_USER}

            # autoProvisioning is used to enable/disable the auto-provisioning logic
            # if auto-provisioning is disabled, the entity and the wallet must be created using the REST API
            # if auto-provisioning is enabled, the entity and the wallet are created automatically when the api key is used
            autoProvisioning = true
            autoProvisioning = ${?API_KEY_AUTO_PROVISIONING}
        }
        keycloak {
            enabled = false
            enabled = ${?KEYCLOAK_ENABLED}

            keycloakUrl = "http://localhost:9980"
            keycloakUrl = ${?KEYCLOAK_URL}

            realmName = "atala-demo"
            realmName = ${?KEYCLOAK_REALM}

            clientId = "prism-agent"
            clientId = ${?KEYCLOAK_CLIENT_ID}

            clientSecret = "prism-agent-demo-secret"
            clientSecret = ${?KEYCLOAK_CLIENT_SECRET}

            # autoUpgradeToRPT is used to enable the auto RPT (requesting party token) logic.
            # if enabled, normal accessToken can be used to perform permission checks by obtaining RPT from accessToken.
            # if disabled, accessToken must be RPT which already include the permission claims.
            autoUpgradeToRPT = true
            autoUpgradeToRPT = ${?KEYCLOAK_UMA_AUTO_UPGRADE_RPT}

            # A path of 'roles' claim in the JWT. Nested path maybe indicated by '.' separator.
            # The JWT 'roles' claim is expected to be a list of the following values: [admin, tenant]
            rolesClaimPath = "resource_access."${agent.authentication.keycloak.clientId}".roles"
            rolesClaimPath = ${?KEYCLOAK_ROLES_CLAIM_PATH}
        }
    }
    database {
        host = "localhost"
        host = ${?AGENT_DB_HOST}
        port = 5432
        port = ${?AGENT_DB_PORT}
        databaseName = "agent"
        databaseName = ${?AGENT_DB_NAME}
        username = "postgres"
        username = ${?AGENT_DB_USER}
        password = "postgres"
        password = ${?AGENT_DB_PASSWORD}
        appUsername = "agent-application-user"
        appUsername = ${?AGENT_DB_APP_USER}
        appPassword = "password"
        appPassword = ${?AGENT_DB_APP_PASSWORD}
        awaitConnectionThreads = 8
    }
    verification {
        options {
            credential {
               verifySignature = true
               verifyDates = false
               leeway = 0 seconds
               verifySignature = ${?CREDENTIAL_VERIFY_SIGNATURE}
               verifyDates = ${?CREDENTIAL_VERIFY_DATES}
               leeway = ${?CREDENTIAL_LEEWAY}
            }
            presentation {
               verifySignature = true
               verifyDates = false
               verifyHoldersBinding = false
               leeway = 0 seconds
               verifySignature = ${?PRESENTATION_VERIFY_SIGNATURE}
               verifyDates = ${?PRESENTATION_VERIFY_DATES}
               verifyHoldersBinding = ${?PRESENTATION_VERIFY_HOLDER_BINDING}
               leeway = ${?PRESENTATION_LEEWAY}
            }
        }
    }
    secretStorage {
        # Supports the following backend: [vault, postgres, memory]
        # If 'postgres' is used as a backend, it uses the agent db configuration.
        # If any other backend is used, its corresponding configuration must be configured.
        backend = "vault"
        backend = ${?SECRET_STORAGE_BACKEND}

        # Configuration for Vault as a secret storage
        vault {
            address = "http://localhost:8200"
            address = ${?VAULT_ADDR}

            # Vault token authentication.
            # Can be omitted if other authentication mechanism is provided.
            token = ${?VAULT_TOKEN}

            # Vault AppRole authentication.
            # Can be omitted if other authentication mechanism is provided.
            appRoleRoleId = ${?VAULT_APPROLE_ROLE_ID}
            appRoleSecretId = ${?VAULT_APPROLE_SECRET_ID}
        }
    }
    webhookPublisher {
        url = ${?GLOBAL_WEBHOOK_URL}
        apiKey = ${?GLOBAL_WEBHOOK_API_KEY}
        parallelism = ${?WEBHOOK_PARALLELISM}
    }

    defaultWallet {
        # A configuration for initializing default wallet.
        #
        # Once the default wallet is initialized, the agent will use persisted configurations
        # from its storage and may ignore these parameters.
        enabled = true
        enabled = ${?DEFAULT_WALLET_ENABLED}

        # Wallet seed to be used for the default wallet. If not provided, it will be generated.
        seed = ${?DEFAULT_WALLET_SEED}

        # Webhook url of the default wallet.
        # If provided, webhook notification will be created when wallet is initialized.
        # If not provided, webhook will not be created.
        # If provided after the default wallet has been initialized, it will not have any effect.
        webhookUrl = ${?DEFAULT_WALLET_WEBHOOK_URL}
        webhookApiKey = ${?DEFAULT_WALLET_WEBHOOK_API_KEY}

        authApiKey = "default"
        authApiKey = ${?DEFAULT_WALLET_AUTH_API_KEY}
    }
}
